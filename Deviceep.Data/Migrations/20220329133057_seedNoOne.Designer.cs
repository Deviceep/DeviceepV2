// <auto-generated />
using System;
using Deviceep.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Deviceep.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220329133057_seedNoOne")]
    partial class seedNoOne
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Deviceep.Entity.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.AttendanceHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Hour")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.ToTable("AttendanceHours");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Minor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseClassroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseClassrooms");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseTimeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CourseEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CourseStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CourseTimeInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 3, 29, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 3, 29, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 3, 29, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 3, 29, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 3, 29, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 3, 29, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 3, 29, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 3, 29, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 3, 29, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 3, 29, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 3, 29, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 3, 29, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 3, 29, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 3, 29, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 3, 29, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 3, 29, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 3, 29, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 3, 29, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 3, 29, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 3, 29, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 3, 29, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 3, 29, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 3, 29, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 3, 29, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 3, 29, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 3, 29, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 3, 29, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 3, 29, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 33,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 3, 29, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 34,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 3, 29, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 35,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 3, 29, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 36,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 37,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 3, 29, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 38,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 3, 29, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 39,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 3, 29, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 40,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 3, 29, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 3, 29, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseTimeInfoCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseTimeInfoId")
                        .HasColumnType("int");

                    b.Property<int>("CouseTimeInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseTimeInfoId");

                    b.ToTable("CourseTimeInfoCourses");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("EnrollmentTerm")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("EnrollmentYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable(" Enrollments");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FacultyName = "Mühendislik ve Doga Bilimleri Fakültesi"
                        },
                        new
                        {
                            Id = 2,
                            FacultyName = "Fen Edebiyat Fakültesi"
                        },
                        new
                        {
                            Id = 3,
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi"
                        },
                        new
                        {
                            Id = 4,
                            FacultyName = "Sanat ve Tasarım Fakültesi"
                        },
                        new
                        {
                            Id = 5,
                            FacultyName = "Ugulamalı Bilimler Fakültesi"
                        },
                        new
                        {
                            Id = 6,
                            FacultyName = "Tıp Fakültesi"
                        });
                });

            modelBuilder.Entity("Deviceep.Entity.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.UserDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Attendance", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Course", "Course")
                        .WithMany("Attendances")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.User", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.AttendanceHour", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Attendance", "Attendance")
                        .WithMany("AttendanceHours")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Course", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseClassroom", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Classroom", "Classroom")
                        .WithMany("CourseClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.Course", "Course")
                        .WithMany("CourseClassrooms")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseTimeInfoCourse", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Course", "Course")
                        .WithMany("CourseTimeInfoCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.CourseTimeInfo", "CourseTimeInfo")
                        .WithMany("courseTimeInfoCourses")
                        .HasForeignKey("CourseTimeInfoId");

                    b.Navigation("Course");

                    b.Navigation("CourseTimeInfo");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Department", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Enrollment", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.UserDepartment", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Department", "Department")
                        .WithMany("UserDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.User", "User")
                        .WithMany("UserDepartments")
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Attendance", b =>
                {
                    b.Navigation("AttendanceHours");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Classroom", b =>
                {
                    b.Navigation("CourseClassrooms");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Course", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("CourseClassrooms");

                    b.Navigation("CourseTimeInfoCourses");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseTimeInfo", b =>
                {
                    b.Navigation("courseTimeInfoCourses");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Department", b =>
                {
                    b.Navigation("UserDepartments");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.User", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Enrollments");

                    b.Navigation("UserDepartments");
                });
#pragma warning restore 612, 618
        }
    }
}
