// <auto-generated />
using System;
using Deviceep.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Deviceep.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20220517201002_Correction")]
    partial class Correction
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Deviceep.Entity.Models.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.AttendanceHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AttendanceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Hour")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AttendanceId");

                    b.ToTable("AttendanceHours");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Major")
                        .HasColumnType("int");

                    b.Property<int>("Minor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClassName = "EG002",
                            Major = 1,
                            Minor = 1
                        },
                        new
                        {
                            Id = 2,
                            ClassName = "EG010",
                            Major = 1,
                            Minor = 2
                        },
                        new
                        {
                            Id = 3,
                            ClassName = "EG102",
                            Major = 1,
                            Minor = 3
                        },
                        new
                        {
                            Id = 4,
                            ClassName = "TD105",
                            Major = 2,
                            Minor = 1
                        },
                        new
                        {
                            Id = 5,
                            ClassName = "TD006",
                            Major = 2,
                            Minor = 2
                        },
                        new
                        {
                            Id = 6,
                            ClassName = "TD204",
                            Major = 2,
                            Minor = 3
                        },
                        new
                        {
                            Id = 7,
                            ClassName = "EK102",
                            Major = 3,
                            Minor = 1
                        },
                        new
                        {
                            Id = 8,
                            ClassName = "EK202",
                            Major = 3,
                            Minor = 2
                        },
                        new
                        {
                            Id = 9,
                            ClassName = "EK103",
                            Major = 3,
                            Minor = 3
                        },
                        new
                        {
                            Id = 10,
                            ClassName = "EK005",
                            Major = 3,
                            Minor = 4
                        });
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseDescription = "Makine Öğrenmesi",
                            CourseName = "CE304",
                            UserId = "5d1b9c35-c8a8-4aa8-b511-bb508beca0bc"
                        },
                        new
                        {
                            Id = 2,
                            CourseDescription = "Gerçek Zamanlı Sistemler",
                            CourseName = "CE216",
                            UserId = "c6221f92-0234-4720-8c63-eec3a13cb75c"
                        },
                        new
                        {
                            Id = 3,
                            CourseDescription = "Veri Madenciliği",
                            CourseName = "CE406",
                            UserId = "9cde8b19-d336-4064-95c7-d27efe0398c4"
                        },
                        new
                        {
                            Id = 4,
                            CourseDescription = "Bilgi Güvenliği",
                            CourseName = "SF314",
                            UserId = "fb16bc16-119c-4abe-8369-8d8c0f37c2ab"
                        },
                        new
                        {
                            Id = 5,
                            CourseDescription = "Yapay Zeka",
                            CourseName = "SF213",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 6,
                            CourseDescription = "Yapay Sinir Ağları",
                            CourseName = "SF418",
                            UserId = "a9876d39-a488-44bb-90bd-d792e4fc3a82"
                        },
                        new
                        {
                            Id = 7,
                            CourseDescription = "Biyolojik Bilimlerin Temeli",
                            CourseName = "FDE104",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 8,
                            CourseDescription = "Mühendisler İçin İktisat",
                            CourseName = "FDE312",
                            UserId = "496a0093-7e9f-4174-bd65-96fa0d7e9434"
                        },
                        new
                        {
                            Id = 9,
                            CourseDescription = "Gıda Proses Mühendisliği",
                            CourseName = "FDE222",
                            UserId = "fb16bc16-119c-4abe-8369-8d8c0f37c2ab"
                        },
                        new
                        {
                            Id = 10,
                            CourseDescription = "Elektromanyetik Alan Teorisi",
                            CourseName = "EE201",
                            UserId = "9cde8b19-d336-4064-95c7-d27efe0398c4"
                        },
                        new
                        {
                            Id = 11,
                            CourseDescription = "Dever Analizi",
                            CourseName = "EE215",
                            UserId = "5d1b9c35-c8a8-4aa8-b511-bb508beca0bc"
                        },
                        new
                        {
                            Id = 12,
                            CourseDescription = "Kompleks Analizi",
                            CourseName = "EE402",
                            UserId = "5d1b9c35-c8a8-4aa8-b511-bb508beca0bc"
                        },
                        new
                        {
                            Id = 13,
                            CourseDescription = "Tedarik Zinciri Yönetimi",
                            CourseName = "ISE314",
                            UserId = "fb16bc16-119c-4abe-8369-8d8c0f37c2ab"
                        },
                        new
                        {
                            Id = 14,
                            CourseDescription = "İstatiksel Kalite Kontrol",
                            CourseName = "ISE236",
                            UserId = "c6221f92-0234-4720-8c63-eec3a13cb75c"
                        },
                        new
                        {
                            Id = 15,
                            CourseDescription = "Sistem Dinamiği ve Modelleme",
                            CourseName = "ISE402",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 16,
                            CourseDescription = "Tasarım Çalışmaları",
                            CourseName = "ARCH202",
                            UserId = "a9876d39-a488-44bb-90bd-d792e4fc3a82"
                        },
                        new
                        {
                            Id = 17,
                            CourseDescription = "Mimari Tasarım",
                            CourseName = "ARCH312",
                            UserId = "fb16bc16-119c-4abe-8369-8d8c0f37c2ab"
                        },
                        new
                        {
                            Id = 18,
                            CourseDescription = "Bina Bilgisi",
                            CourseName = "ARCH402",
                            UserId = "496a0093-7e9f-4174-bd65-96fa0d7e9434"
                        },
                        new
                        {
                            Id = 19,
                            CourseDescription = "Tasarım Temelleri",
                            CourseName = "ICT112",
                            UserId = "9cde8b19-d336-4064-95c7-d27efe0398c4"
                        },
                        new
                        {
                            Id = 20,
                            CourseDescription = "Malzeme ve Teknoloji",
                            CourseName = "ICT213",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 21,
                            CourseDescription = "İç Mimari Tasarım Stüdyosu",
                            CourseName = "ICT313",
                            UserId = "5d1b9c35-c8a8-4aa8-b511-bb508beca0bc"
                        },
                        new
                        {
                            Id = 22,
                            CourseDescription = "Evreni Tanımak",
                            CourseName = "PHS214",
                            UserId = "9cde8b19-d336-4064-95c7-d27efe0398c4"
                        },
                        new
                        {
                            Id = 23,
                            CourseDescription = "Bilgi Ve Entropi",
                            CourseName = "PHS315",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 24,
                            CourseDescription = "Fizikçiler Elektroniği",
                            CourseName = "PHS402",
                            UserId = "a9876d39-a488-44bb-90bd-d792e4fc3a82"
                        },
                        new
                        {
                            Id = 25,
                            CourseDescription = "Diferansiyel Denklemler",
                            CourseName = "MAT211",
                            UserId = "fb16bc16-119c-4abe-8369-8d8c0f37c2ab"
                        },
                        new
                        {
                            Id = 26,
                            CourseDescription = "Ayrık Matematik",
                            CourseName = "MAT202",
                            UserId = "c6221f92-0234-4720-8c63-eec3a13cb75c"
                        },
                        new
                        {
                            Id = 27,
                            CourseDescription = "Analitik Geometri",
                            CourseName = "MAT402",
                            UserId = "9cde8b19-d336-4064-95c7-d27efe0398c4"
                        },
                        new
                        {
                            Id = 28,
                            CourseDescription = "Moleküler Biyoloji Ve Genetiğe Giriş",
                            CourseName = "BIOL101",
                            UserId = "c6221f92-0234-4720-8c63-eec3a13cb75c"
                        },
                        new
                        {
                            Id = 29,
                            CourseDescription = "Moleküler Hücre Biyolojisi",
                            CourseName = "BIOL316",
                            UserId = "a9876d39-a488-44bb-90bd-d792e4fc3a82"
                        },
                        new
                        {
                            Id = 30,
                            CourseDescription = "Davranış Genetiği",
                            CourseName = "BIOL405",
                            UserId = "fb16bc16-119c-4abe-8369-8d8c0f37c2ab"
                        },
                        new
                        {
                            Id = 31,
                            CourseDescription = "Kariyer Planlama",
                            CourseName = "ECON201",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 32,
                            CourseDescription = "Ekonometri",
                            CourseName = "ECON302",
                            UserId = "5d1b9c35-c8a8-4aa8-b511-bb508beca0bc"
                        },
                        new
                        {
                            Id = 33,
                            CourseDescription = "Para Teorisi",
                            CourseName = "ECON231",
                            UserId = "9cde8b19-d336-4064-95c7-d27efe0398c4"
                        },
                        new
                        {
                            Id = 34,
                            CourseDescription = "Para Politikası",
                            CourseName = "BSU212",
                            UserId = "c6221f92-0234-4720-8c63-eec3a13cb75c"
                        },
                        new
                        {
                            Id = 35,
                            CourseDescription = "Uluslararası Finans",
                            CourseName = "BSU305",
                            UserId = "496a0093-7e9f-4174-bd65-96fa0d7e9434"
                        },
                        new
                        {
                            Id = 36,
                            CourseDescription = "Kamu Maliyesi",
                            CourseName = "BSU406",
                            UserId = "c6221f92-0234-4720-8c63-eec3a13cb75c"
                        },
                        new
                        {
                            Id = 37,
                            CourseDescription = "Temel Piyano",
                            CourseName = "MZK106",
                            UserId = "a9876d39-a488-44bb-90bd-d792e4fc3a82"
                        },
                        new
                        {
                            Id = 38,
                            CourseDescription = "Bireysel Çalgı",
                            CourseName = "MZK304",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 39,
                            CourseDescription = "Bireysel Ses Eğitimi",
                            CourseName = "MZK203",
                            UserId = "a9876d39-a488-44bb-90bd-d792e4fc3a82"
                        },
                        new
                        {
                            Id = 40,
                            CourseDescription = "İletişime Giriş",
                            CourseName = "ILT103",
                            UserId = "5d1b9c35-c8a8-4aa8-b511-bb508beca0bc"
                        },
                        new
                        {
                            Id = 41,
                            CourseDescription = "Yazılı Anlatım",
                            CourseName = "ILT205",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 42,
                            CourseDescription = "Genel İletişim Araştırmaları",
                            CourseName = "ILT303",
                            UserId = "496a0093-7e9f-4174-bd65-96fa0d7e9434"
                        },
                        new
                        {
                            Id = 43,
                            CourseDescription = "Hemşirelikte Eğitim",
                            CourseName = "FHS103",
                            UserId = "c6221f92-0234-4720-8c63-eec3a13cb75c"
                        },
                        new
                        {
                            Id = 44,
                            CourseDescription = "Havacılık Kuralları",
                            CourseName = "HYO201",
                            UserId = "fb16bc16-119c-4abe-8369-8d8c0f37c2ab"
                        },
                        new
                        {
                            Id = 45,
                            CourseDescription = "Uçak Malzeme Bilgisi",
                            CourseName = "HYO212",
                            UserId = "a9876d39-a488-44bb-90bd-d792e4fc3a82"
                        },
                        new
                        {
                            Id = 46,
                            CourseDescription = "Uçak Yapıları Ve Sistemleri",
                            CourseName = "HYO316",
                            UserId = "fb16bc16-119c-4abe-8369-8d8c0f37c2ab"
                        },
                        new
                        {
                            Id = 47,
                            CourseDescription = "Klinik Uygulamalara Giriş",
                            CourseName = "MED103",
                            UserId = "9cde8b19-d336-4064-95c7-d27efe0398c4"
                        },
                        new
                        {
                            Id = 48,
                            CourseDescription = "Adli Tıp",
                            CourseName = "MED305",
                            UserId = "496a0093-7e9f-4174-bd65-96fa0d7e9434"
                        },
                        new
                        {
                            Id = 49,
                            CourseDescription = "Nöroloji",
                            CourseName = "MED408",
                            UserId = "c6221f92-0234-4720-8c63-eec3a13cb75c"
                        },
                        new
                        {
                            Id = 50,
                            CourseDescription = "Sağlık Bilimleri İçin Fizik",
                            CourseName = "PHAR108",
                            UserId = "fb16bc16-119c-4abe-8369-8d8c0f37c2ab"
                        },
                        new
                        {
                            Id = 51,
                            CourseDescription = "Eczacılık Bilgisayar Kullanımı",
                            CourseName = "PHAR305",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 52,
                            CourseDescription = "Eczacılığa Giriş",
                            CourseName = "PHAR101",
                            UserId = "5d1b9c35-c8a8-4aa8-b511-bb508beca0bc"
                        },
                        new
                        {
                            Id = 53,
                            CourseDescription = "Protetik Diş Tedavisi",
                            CourseName = "DENT301",
                            UserId = "c6221f92-0234-4720-8c63-eec3a13cb75c"
                        },
                        new
                        {
                            Id = 54,
                            CourseDescription = "Endodonti",
                            CourseName = "DENT306",
                            UserId = "496a0093-7e9f-4174-bd65-96fa0d7e9434"
                        },
                        new
                        {
                            Id = 55,
                            CourseDescription = "Kariyoloji ve Koruyucu Diş Hekimliği",
                            CourseName = "DENT407",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 56,
                            CourseDescription = "Farmakolojinin İlkeleri",
                            CourseName = "FHS307",
                            UserId = "496a0093-7e9f-4174-bd65-96fa0d7e9434"
                        },
                        new
                        {
                            Id = 57,
                            CourseDescription = "Cerrahi Hastalıkları Hemşireliği",
                            CourseName = "FHS404",
                            UserId = "fb16bc16-119c-4abe-8369-8d8c0f37c2ab"
                        },
                        new
                        {
                            Id = 58,
                            CourseDescription = "Elektroniğe Giriş",
                            CourseName = "KON102",
                            UserId = "5d1b9c35-c8a8-4aa8-b511-bb508beca0bc"
                        },
                        new
                        {
                            Id = 59,
                            CourseDescription = "İşaretler ve Sistemler",
                            CourseName = "KON206",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        },
                        new
                        {
                            Id = 60,
                            CourseDescription = "Ölçme Tekniği ve Algılayıcılar",
                            CourseName = "KON403",
                            UserId = "06329571-32da-4f66-a3e4-e2a00dc60a0a"
                        });
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseClassroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ClassroomId")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseClassrooms");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseTimeInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseDay")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CourseEnd")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CourseStart")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("CourseTimeInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 5, 17, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 5, 17, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 5, 17, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 5, 17, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 5, 17, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 5, 17, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            CourseDay = "Pazartesi",
                            CourseEnd = new DateTime(2022, 5, 17, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 5, 17, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 5, 17, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 5, 17, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 5, 17, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 5, 17, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 5, 17, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 16,
                            CourseDay = "Salı",
                            CourseEnd = new DateTime(2022, 5, 17, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 17,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 5, 17, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 18,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 5, 17, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 19,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 5, 17, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 20,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 5, 17, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 21,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 22,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 5, 17, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 23,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 5, 17, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 24,
                            CourseDay = "Çarşamba",
                            CourseEnd = new DateTime(2022, 5, 17, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 25,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 5, 17, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 26,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 5, 17, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 27,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 5, 17, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 28,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 5, 17, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 29,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 30,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 5, 17, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 31,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 5, 17, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 32,
                            CourseDay = "Perşembe",
                            CourseEnd = new DateTime(2022, 5, 17, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 33,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 5, 17, 10, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 34,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 5, 17, 11, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 10, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 35,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 5, 17, 12, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 11, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 36,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 5, 17, 13, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 12, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 37,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 13, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 38,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 5, 17, 15, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 14, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 39,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 5, 17, 16, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 15, 30, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 40,
                            CourseDay = "Cuma",
                            CourseEnd = new DateTime(2022, 5, 17, 17, 30, 0, 0, DateTimeKind.Unspecified),
                            CourseStart = new DateTime(2022, 5, 17, 16, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseTimeInfoCourse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("CourseTimeInfoId")
                        .HasColumnType("int");

                    b.Property<int>("CouseTimeInfoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("CourseTimeInfoId");

                    b.ToTable("CourseTimeInfoCourses");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("FacultyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentName = "Bilgisayar Mühendisliği",
                            FacultyId = 1
                        },
                        new
                        {
                            Id = 2,
                            DepartmentName = "Yazılım Mühendisliği",
                            FacultyId = 1
                        },
                        new
                        {
                            Id = 3,
                            DepartmentName = "Gıda Mühendisliği",
                            FacultyId = 1
                        },
                        new
                        {
                            Id = 4,
                            DepartmentName = "Elektrik Eloktronik Mühendisliği",
                            FacultyId = 1
                        },
                        new
                        {
                            Id = 5,
                            DepartmentName = "Endüstri Mühendisliği",
                            FacultyId = 1
                        },
                        new
                        {
                            Id = 6,
                            DepartmentName = "Mimarlık",
                            FacultyId = 1
                        },
                        new
                        {
                            Id = 7,
                            DepartmentName = "İç Mimarlık ve Çevre Tasarımı",
                            FacultyId = 1
                        },
                        new
                        {
                            Id = 8,
                            DepartmentName = "Fizik",
                            FacultyId = 2
                        },
                        new
                        {
                            Id = 9,
                            DepartmentName = "Matematik",
                            FacultyId = 2
                        },
                        new
                        {
                            Id = 10,
                            DepartmentName = "Moleküler Biyoloji ve Genetik Bölümü",
                            FacultyId = 2
                        },
                        new
                        {
                            Id = 11,
                            DepartmentName = "İktisat",
                            FacultyId = 3
                        },
                        new
                        {
                            Id = 12,
                            DepartmentName = "İşletme",
                            FacultyId = 3
                        },
                        new
                        {
                            Id = 13,
                            DepartmentName = "Müzik ve Sahne Sanatları",
                            FacultyId = 4
                        },
                        new
                        {
                            Id = 14,
                            DepartmentName = "İletişim Tasarımı",
                            FacultyId = 4
                        },
                        new
                        {
                            Id = 15,
                            DepartmentName = "Havacılık Elektroniği Bölümü",
                            FacultyId = 5
                        },
                        new
                        {
                            Id = 16,
                            DepartmentName = "Tıp",
                            FacultyId = 6
                        },
                        new
                        {
                            Id = 17,
                            DepartmentName = "Eczacılık",
                            FacultyId = 6
                        },
                        new
                        {
                            Id = 18,
                            DepartmentName = "Dişcilik",
                            FacultyId = 6
                        },
                        new
                        {
                            Id = 19,
                            DepartmentName = "Hemşirelik",
                            FacultyId = 6
                        },
                        new
                        {
                            Id = 20,
                            DepartmentName = "Kontrol Otomasyon Mühendisliği",
                            FacultyId = 1
                        });
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Enrollments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("EnrollmentTerm")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("EnrollmentYear")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("UserId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FacultyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Faculties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FacultyName = "Mühendislik ve Doga Bilimleri Fakültesi"
                        },
                        new
                        {
                            Id = 2,
                            FacultyName = "Fen Edebiyat Fakültesi"
                        },
                        new
                        {
                            Id = 3,
                            FacultyName = "İktisadi ve İdari Bilimler Fakültesi"
                        },
                        new
                        {
                            Id = 4,
                            FacultyName = "Sanat ve Tasarım Fakültesi"
                        },
                        new
                        {
                            Id = 5,
                            FacultyName = "Ugulamalı Bilimler Fakültesi"
                        },
                        new
                        {
                            Id = 6,
                            FacultyName = "Tıp Fakültesi"
                        });
                });

            modelBuilder.Entity("Deviceep.Entity.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("HasRfid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.UserDepartment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:IdentityIncrement", 1)
                        .HasAnnotation("SqlServer:IdentitySeed", 1)
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDepartments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasData(
                        new
                        {
                            Id = "f6185cb6-75d0-4996-8be2-2fdfdfc724d9",
                            ConcurrencyStamp = "ac811329-6928-4a3d-86a9-fad8da252417",
                            Name = "UserSlave",
                            NormalizedName = "USERSLAVE"
                        },
                        new
                        {
                            Id = "eea90535-edfb-4138-870a-e04cd3abbbe6",
                            ConcurrencyStamp = "f5d98bc1-8079-4640-a497-18eb7fb61af5",
                            Name = "UserMaster",
                            NormalizedName = "USERMASTER"
                        },
                        new
                        {
                            Id = "7782d260-e691-42af-967f-de7916066691",
                            ConcurrencyStamp = "4c179cff-6a52-477b-9ad7-a90ac8268a9f",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Attendance", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Course", "Course")
                        .WithMany("Attendances")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.User", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.AttendanceHour", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Attendance", "Attendance")
                        .WithMany("AttendanceHours")
                        .HasForeignKey("AttendanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attendance");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Course", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseClassroom", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Classroom", "Classroom")
                        .WithMany("CourseClassrooms")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.Course", "Course")
                        .WithMany("CourseClassrooms")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("Course");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseTimeInfoCourse", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Course", "Course")
                        .WithMany("CourseTimeInfoCourses")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.CourseTimeInfo", "CourseTimeInfo")
                        .WithMany("courseTimeInfoCourses")
                        .HasForeignKey("CourseTimeInfoId");

                    b.Navigation("Course");

                    b.Navigation("CourseTimeInfo");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Department", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Faculty", "Faculty")
                        .WithMany("Departments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Faculty");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Enrollments", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.User", "User")
                        .WithMany("Enrollments")
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.UserDepartment", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.Department", "Department")
                        .WithMany("UserDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.User", "User")
                        .WithMany("UserDepartments")
                        .HasForeignKey("UserId");

                    b.Navigation("Department");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Deviceep.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Deviceep.Entity.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Attendance", b =>
                {
                    b.Navigation("AttendanceHours");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Classroom", b =>
                {
                    b.Navigation("CourseClassrooms");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Course", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("CourseClassrooms");

                    b.Navigation("CourseTimeInfoCourses");

                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.CourseTimeInfo", b =>
                {
                    b.Navigation("courseTimeInfoCourses");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Department", b =>
                {
                    b.Navigation("UserDepartments");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.Faculty", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("Deviceep.Entity.Models.User", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Enrollments");

                    b.Navigation("UserDepartments");
                });
#pragma warning restore 612, 618
        }
    }
}
